{"version":3,"sources":["component/menu-item/index.js","component/menu-item/MenuItem.jsx","assets/images/mock-recipe-img.jpg","helpers/helpers.js","helpers/constants.js","component/custom-elements/custom-popup/index.js","component/custom-elements/custom-popup/CustomPopup.jsx","component/custom-elements/custom-button/index.js","component/custom-elements/custom-button/CustomButton.jsx","component/custom-elements/custom-recipe-btn/index.js","component/custom-elements/custom-recipe-btn/CustomRecipeBtn.jsx","component/header/index.js","component/header/Header.jsx","component/recipe-card/index.js","component/recipe-card/RecipeCard.jsx","component/random-recipe/index.js","component/random-recipe/RandomRecipe.jsx","component/favorite-recipe/index.js","component/favorite-recipe/FavoriteRecipes.jsx","component/app/index.js","component/app/App.jsx","index.js"],"names":["MenuItem","props","id","path","children","className","to","exact","activeClassName","storage","window","localStorage","handleChange","event","setter","target","value","isEmptyStorage","key","getItem","getRandomRecipe","localState","fetch","then","res","json","meals","idMeal","strMeal","strMealThumb","strInstructions","CustomPopup","trigger","setTrigger","onClick","CustomButton","handleClick","buttonClassName","CustomRecipeBtn","useState","text","setText","input","setInput","popupFlag","setPopupFlag","type","placeholder","onChange","name","cols","rows","min","max","obj","Math","round","random","mock_img","tempArr","JSON","parse","meal","setItem","stringify","saveRecipeToLocalStorage","Header","RecipeCard","src","alt","RandomRecipe","state","setState","length","renderRecipe","setLocalState","isEmptyObj","temp","push","FavoriteRecipes","map","App","basename","process","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.3266b122.chunk.js","sourcesContent":["import MenuItem from \"./MenuItem\";\r\n\r\nexport default MenuItem;","import React from 'react';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nimport './menu-item.scss';\r\n\r\nconst MenuItem = props => {\r\n\r\n    const {\r\n        id,\r\n        path,\r\n        children\r\n    } = props;\r\n\r\n    return (\r\n        <li key={ id } className='nav-item'>\r\n            <NavLink\r\n                to={`/${ path }`}\r\n                exact\r\n                activeClassName='active-recipe'\r\n                className='item'\r\n            >\r\n                { children }\r\n            </NavLink>\r\n        </li>\r\n    )\r\n};\r\n\r\nexport default MenuItem;","export default __webpack_public_path__ + \"static/media/mock-recipe-img.28e38134.jpg\";","import {GET_API} from \"./constants\";\r\n\r\nlet storage = window.localStorage;\r\n\r\nconst handleChange = (event, setter) => {\r\n    setter(event.target.value);\r\n};\r\n\r\nconst randomID = (min, max) => {\r\n    return Math.round(min - 0.5 + Math.random() * (max - min + 1));\r\n};\r\n\r\nconst isEmptyStorage = key => !!storage.getItem(key);\r\nconst isEmptyObj = obj => {\r\n    for (let key in obj) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n};\r\n\r\nconst getRandomRecipe = localState => {\r\n    fetch(GET_API)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            const {\r\n                idMeal,\r\n                strMeal,\r\n                strMealThumb,\r\n                strInstructions\r\n            } = res.meals[0];\r\n\r\n            localState({\r\n                idMeal,\r\n                strMeal,\r\n                strMealThumb,\r\n                strInstructions\r\n            });\r\n        });\r\n};\r\n\r\nconst saveRecipeToLocalStorage = (localState, setLocalState) => {\r\n    if (isEmptyObj(localState)) {\r\n        return;\r\n    };\r\n\r\n    if (!storage.getItem('meal')) {\r\n        let temp = [];\r\n        temp.push(localState);\r\n        storage.setItem('meal', JSON.stringify(temp));\r\n        getRandomRecipe(setLocalState);\r\n    } else {\r\n        let tempArr = [...JSON.parse(storage.meal), localState];\r\n        storage.setItem(\"meal\", JSON.stringify(tempArr));\r\n        getRandomRecipe(setLocalState);\r\n    }\r\n};\r\n\r\nexport {\r\n    storage,\r\n    randomID,\r\n    isEmptyObj,\r\n    handleChange,\r\n    isEmptyStorage,\r\n    getRandomRecipe,\r\n    saveRecipeToLocalStorage\r\n}","export const GET_API = \"https://www.themealdb.com/api/json/v1/1/random.php\";","import CustomPopup from \"./CustomPopup\";\r\n\r\nexport default CustomPopup;","import React from 'react';\r\nimport './custom-popup.scss';\r\n\r\nconst CustomPopup = ({trigger, setTrigger, children}) => {\r\n\r\n    return (trigger) ? (\r\n        <div className='custom_popup-form'>\r\n            <div className='custom_popup-inner'>\r\n                <button\r\n                    className='close-btn'\r\n                    onClick={() => setTrigger(false)}\r\n                >\r\n                    &#215;\r\n                </button>\r\n                {children}\r\n            </div>\r\n        </div>\r\n    ) : ''\r\n};\r\n\r\nexport default CustomPopup;","import CustomButton from \"./CustomButton\";\r\n\r\nexport default CustomButton;","import React from 'react';\r\n\r\nimport './custom-button.scss';\r\n\r\nconst CustomButton = ({ handleClick, buttonClassName, children }) => {\r\n\r\n    return (\r\n        <button\r\n            onClick={ handleClick }\r\n            className={ buttonClassName }\r\n        >\r\n            { children }\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default CustomButton;\r\n","import CustomRecipeBtn from \"./CustomRecipeBtn\";\r\n\r\nexport default CustomRecipeBtn;","import React, { useState } from 'react';\r\nimport './custom-recipe-btn.scss';\r\nimport mock_img from '../../../assets/images/mock-recipe-img.jpg'\r\n\r\nimport {\r\n    storage,\r\n    randomID,\r\n    handleChange,\r\n} from \"../../../helpers\";\r\n\r\nimport CustomPopup from \"../custom-popup\";\r\nimport CustomButton from \"../custom-button\";\r\n\r\nconst CustomRecipeBtn = () => {\r\n    const [text, setText] = useState('');\r\n    const [input, setInput] = useState('');\r\n    const [popupFlag, setPopupFlag] = useState(false);\r\n\r\n    const saveRecipeToLocalStorage = () => {\r\n        if (!input || !text) {\r\n            return;\r\n        }\r\n\r\n        let obj = {\r\n            idMeal: `${randomID(1, 9999)}`,\r\n            strMeal: input,\r\n            strMealThumb: mock_img,\r\n            strInstructions: text\r\n        };\r\n        let tempArr = [...JSON.parse(storage.meal), obj];\r\n        storage.setItem('meal', JSON.stringify(tempArr));\r\n        setPopupFlag(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <CustomButton\r\n                buttonClassName='card-btn card-position size'\r\n                handleClick={() => setPopupFlag(true)}\r\n            >\r\n                Add custom dish\r\n            </CustomButton>\r\n\r\n            <CustomPopup\r\n                trigger={popupFlag}\r\n                setTrigger={setPopupFlag}\r\n            >\r\n                <h3>Add custom dish</h3>\r\n                <form className='custom-dish_form'>\r\n                    <input\r\n                        type='text'\r\n                        placeholder='Dish title'\r\n                        className='custom-dish_input'\r\n                        onChange={event => handleChange(event, setInput)}\r\n                    />\r\n                    \r\n                    <textarea\r\n                        className='custom-dish_text-field'\r\n                        name=\"dish description\"\r\n                        cols=\"30\"\r\n                        rows=\"10\"\r\n                        placeholder='Dish description...'\r\n                        onChange={event => handleChange(event, setText)}\r\n                    />\r\n\r\n                    <CustomButton\r\n                        buttonClassName='card-btn'\r\n                        handleClick={() => saveRecipeToLocalStorage()}\r\n                    >\r\n                        Add custom dish    \r\n                    </CustomButton>\r\n                </form>\r\n            </CustomPopup>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default CustomRecipeBtn;","import Header from \"./Header\";\r\n\r\nexport default Header;","import React from 'react';\r\nimport './header.scss';\r\n\r\nimport MenuItem from \"../menu-item\";\r\nimport CustomRecipeBtn from \"../custom-elements/custom-recipe-btn\";\r\n\r\nconst Header = () => {\r\n\r\n    return(\r\n        <header className=\"header\">\r\n            <nav className='nav'>\r\n                <MenuItem\r\n                    key='1'\r\n                    path=''\r\n                >\r\n                    Random dish\r\n                </MenuItem>\r\n\r\n                <MenuItem\r\n                    key='2'\r\n                    path='favorite'\r\n                >\r\n                    Favorites\r\n                </MenuItem>\r\n\r\n                <CustomRecipeBtn/>\r\n            </nav>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import RecipeCard from \"./RecipeCard\";\r\n\r\nexport default RecipeCard;","import React from 'react';\r\nimport './recipe-card.scss'\r\n\r\nconst RecipeCard = ({ idMeal, strMeal, strMealThumb, strInstructions }) => {\r\n\r\n    return (\r\n        <div className='recipe-card' key={ idMeal }>\r\n            <img\r\n                src={ strMealThumb }\r\n                alt={ strMeal }\r\n                className='recipe-img'\r\n            />\r\n            <div className='card-info'>\r\n                <h2 className='recipe-name'>\r\n                    { strMeal }\r\n                </h2>\r\n                <p className='recipe-description'>\r\n                    { strInstructions }\r\n                </p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RecipeCard;\r\n\r\n\r\n\r\n","import RandomRecipe from \"./RandomRecipe\";\r\n\r\nexport default RandomRecipe;","import React, { useState } from 'react';\r\n\r\nimport './random-recipe.scss';\r\nimport RecipeCard from \"../recipe-card\";\r\nimport CustomButton from \"../custom-elements/custom-button\";\r\nimport {\r\n    storage,\r\n    isEmptyStorage,\r\n    getRandomRecipe,\r\n    saveRecipeToLocalStorage\r\n} from \"../../helpers\";\r\n\r\nconst RandomRecipe = () => {\r\n    const [state, setState ] = useState([]);\r\n\r\n    if (storage.length === 0 || !storage.getItem('meal')) {\r\n        storage.setItem('meal', '[]');\r\n        getRandomRecipe(setState);\r\n    }\r\n\r\n    const renderRecipe = () => {\r\n        const meal = JSON.parse(storage.meal);\r\n        if (state.length === 0 && isEmptyStorage('meal')) {\r\n            return (\r\n                <RecipeCard\r\n                    key={meal[0]?.idMeal}\r\n                    strMeal={meal[0]?.strMeal}\r\n                    strMealThumb={meal[0]?.strMealThumb}\r\n                    strInstructions={meal[0]?.strInstructions}\r\n                />\r\n            )\r\n        }\r\n\r\n        return (\r\n            <RecipeCard\r\n                key={state.idMeal}\r\n                strMeal={state.strMeal}\r\n                strMealThumb={state.strMealThumb}\r\n                strInstructions={state.strInstructions}\r\n            />\r\n        )\r\n\r\n    };\r\n\r\n    return (\r\n        <div className='random-card'>\r\n\r\n            { renderRecipe() }\r\n\r\n            <div className=\"buttons\">\r\n                <CustomButton\r\n                    buttonClassName='card-btn'\r\n                    handleClick={() => getRandomRecipe(setState)}\r\n                >\r\n                    Skip\r\n                </CustomButton>\r\n\r\n                <CustomButton\r\n                    buttonClassName='card-btn'\r\n                    handleClick={() => saveRecipeToLocalStorage(state, setState)}\r\n                >\r\n                    Like\r\n                </CustomButton>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default RandomRecipe;","import FavoriteRecipes from \"./FavoriteRecipes\";\r\n\r\nexport default FavoriteRecipes;","import React from 'react';\r\nimport './favorite-recipe.scss';\r\nimport RecipeCard from \"../recipe-card\";\r\nimport { storage } from \"../../helpers/helpers\";\r\n\r\nconst FavoriteRecipes = () => {\r\n\r\n    return (\r\n        <div className='favorite-card'>\r\n            {\r\n                JSON.parse(storage.meal).map(\r\n                    ({ idMeal, strMeal, strMealThumb, strInstructions }) => (\r\n                        <RecipeCard\r\n                            key={idMeal}\r\n                            strMeal={strMeal}\r\n                            strMealThumb={strMealThumb}\r\n                            strInstructions={strInstructions}\r\n                        />\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default FavoriteRecipes;","import App from \"./App\";\r\n\r\n\r\nexport default App;","import React, { useState } from \"react\";\r\nimport './app.scss';\r\nimport Header from \"../header\";\r\nimport {\r\n    Route,\r\n    Switch,\r\n    Redirect,\r\n    HashRouter\r\n} from \"react-router-dom\";\r\nimport RandomRecipe from \"../random-recipe\";\r\nimport FavoriteRecipes from \"../favorite-recipe\";\r\n\r\nimport {\r\n    storage,\r\n    isEmptyStorage\r\n} from \"../../helpers/helpers\";\r\nimport CustomButton from \"../custom-elements/custom-button\";\r\nimport CustomPopup from \"../custom-elements/custom-popup\";\r\n\r\nconst App = () => {\r\n\r\n    const [popupFlag, setPopupFlag] = useState(false);\r\n\r\n    const renderCondition = () => {\r\n        if (isEmptyStorage('meal') && JSON.parse(storage.getItem('meal')).length !== 0) {\r\n            return <FavoriteRecipes />\r\n        } else {\r\n            setPopupFlag(true);\r\n            return <Redirect to='/' />\r\n        }\r\n    };\r\n\r\n    return (\r\n        <HashRouter basename={process.env.PUBLIC_URL}>\r\n            <div className=\"app\">\r\n                <Header />\r\n\r\n                <CustomPopup\r\n                    trigger={popupFlag}\r\n                    setTrigger={setPopupFlag}\r\n                >\r\n                    <h3>Ваша коллекция любимых рецептов пуста! Пожалуйста, добавьте рецепт</h3>\r\n                    <CustomButton\r\n                        buttonClassName='card-btn'\r\n                        handleClick={() => setPopupFlag(false)}\r\n                    >\r\n                        Добавить рецепт\r\n                    </CustomButton>\r\n                </CustomPopup>\r\n\r\n                <main className='main-content'>\r\n                    <Switch>\r\n\r\n                        <Route\r\n                            path='/'\r\n                            render={() => <RandomRecipe />}\r\n                            exact\r\n                        />\r\n\r\n                        <Route\r\n                            path='/favorite'\r\n                            exact\r\n                        >\r\n                            {renderCondition}\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                </main>\r\n\r\n            </div>\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from \"./component/app\";\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}